// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.26.0
// source: mflow/apps/approval/pb/rpc.proto

package approval

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RPC_CreateApproval_FullMethodName       = "/infraboard.mflow.approval.RPC/CreateApproval"
	RPC_QueryApproval_FullMethodName        = "/infraboard.mflow.approval.RPC/QueryApproval"
	RPC_DescribeApproval_FullMethodName     = "/infraboard.mflow.approval.RPC/DescribeApproval"
	RPC_EditApproval_FullMethodName         = "/infraboard.mflow.approval.RPC/EditApproval"
	RPC_UpdateApprovalStatus_FullMethodName = "/infraboard.mflow.approval.RPC/UpdateApprovalStatus"
)

// RPCClient is the client API for RPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// RPC 服务构建配置
type RPCClient interface {
	// 创建发布申请
	CreateApproval(ctx context.Context, in *CreateApprovalRequest, opts ...grpc.CallOption) (*Approval, error)
	// 查询发布申请列表
	QueryApproval(ctx context.Context, in *QueryApprovalRequest, opts ...grpc.CallOption) (*ApprovalSet, error)
	// 查询发布申请详情
	DescribeApproval(ctx context.Context, in *DescribeApprovalRequest, opts ...grpc.CallOption) (*Approval, error)
	// 编辑发布申请
	EditApproval(ctx context.Context, in *EditApprovalRequest, opts ...grpc.CallOption) (*Approval, error)
	// 更新发布申请状态
	UpdateApprovalStatus(ctx context.Context, in *UpdateApprovalStatusRequest, opts ...grpc.CallOption) (*Approval, error)
}

type rPCClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCClient(cc grpc.ClientConnInterface) RPCClient {
	return &rPCClient{cc}
}

func (c *rPCClient) CreateApproval(ctx context.Context, in *CreateApprovalRequest, opts ...grpc.CallOption) (*Approval, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Approval)
	err := c.cc.Invoke(ctx, RPC_CreateApproval_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) QueryApproval(ctx context.Context, in *QueryApprovalRequest, opts ...grpc.CallOption) (*ApprovalSet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApprovalSet)
	err := c.cc.Invoke(ctx, RPC_QueryApproval_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) DescribeApproval(ctx context.Context, in *DescribeApprovalRequest, opts ...grpc.CallOption) (*Approval, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Approval)
	err := c.cc.Invoke(ctx, RPC_DescribeApproval_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) EditApproval(ctx context.Context, in *EditApprovalRequest, opts ...grpc.CallOption) (*Approval, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Approval)
	err := c.cc.Invoke(ctx, RPC_EditApproval_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) UpdateApprovalStatus(ctx context.Context, in *UpdateApprovalStatusRequest, opts ...grpc.CallOption) (*Approval, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Approval)
	err := c.cc.Invoke(ctx, RPC_UpdateApprovalStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCServer is the server API for RPC service.
// All implementations must embed UnimplementedRPCServer
// for forward compatibility.
//
// RPC 服务构建配置
type RPCServer interface {
	// 创建发布申请
	CreateApproval(context.Context, *CreateApprovalRequest) (*Approval, error)
	// 查询发布申请列表
	QueryApproval(context.Context, *QueryApprovalRequest) (*ApprovalSet, error)
	// 查询发布申请详情
	DescribeApproval(context.Context, *DescribeApprovalRequest) (*Approval, error)
	// 编辑发布申请
	EditApproval(context.Context, *EditApprovalRequest) (*Approval, error)
	// 更新发布申请状态
	UpdateApprovalStatus(context.Context, *UpdateApprovalStatusRequest) (*Approval, error)
	mustEmbedUnimplementedRPCServer()
}

// UnimplementedRPCServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCServer struct{}

func (UnimplementedRPCServer) CreateApproval(context.Context, *CreateApprovalRequest) (*Approval, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApproval not implemented")
}
func (UnimplementedRPCServer) QueryApproval(context.Context, *QueryApprovalRequest) (*ApprovalSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryApproval not implemented")
}
func (UnimplementedRPCServer) DescribeApproval(context.Context, *DescribeApprovalRequest) (*Approval, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeApproval not implemented")
}
func (UnimplementedRPCServer) EditApproval(context.Context, *EditApprovalRequest) (*Approval, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditApproval not implemented")
}
func (UnimplementedRPCServer) UpdateApprovalStatus(context.Context, *UpdateApprovalStatusRequest) (*Approval, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApprovalStatus not implemented")
}
func (UnimplementedRPCServer) mustEmbedUnimplementedRPCServer() {}
func (UnimplementedRPCServer) testEmbeddedByValue()             {}

// UnsafeRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCServer will
// result in compilation errors.
type UnsafeRPCServer interface {
	mustEmbedUnimplementedRPCServer()
}

func RegisterRPCServer(s grpc.ServiceRegistrar, srv RPCServer) {
	// If the following call pancis, it indicates UnimplementedRPCServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPC_ServiceDesc, srv)
}

func _RPC_CreateApproval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApprovalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).CreateApproval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_CreateApproval_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).CreateApproval(ctx, req.(*CreateApprovalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_QueryApproval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryApprovalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).QueryApproval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_QueryApproval_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).QueryApproval(ctx, req.(*QueryApprovalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_DescribeApproval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeApprovalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).DescribeApproval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_DescribeApproval_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).DescribeApproval(ctx, req.(*DescribeApprovalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_EditApproval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditApprovalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).EditApproval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_EditApproval_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).EditApproval(ctx, req.(*EditApprovalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_UpdateApprovalStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApprovalStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).UpdateApprovalStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_UpdateApprovalStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).UpdateApprovalStatus(ctx, req.(*UpdateApprovalStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RPC_ServiceDesc is the grpc.ServiceDesc for RPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "infraboard.mflow.approval.RPC",
	HandlerType: (*RPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateApproval",
			Handler:    _RPC_CreateApproval_Handler,
		},
		{
			MethodName: "QueryApproval",
			Handler:    _RPC_QueryApproval_Handler,
		},
		{
			MethodName: "DescribeApproval",
			Handler:    _RPC_DescribeApproval_Handler,
		},
		{
			MethodName: "EditApproval",
			Handler:    _RPC_EditApproval_Handler,
		},
		{
			MethodName: "UpdateApprovalStatus",
			Handler:    _RPC_UpdateApprovalStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mflow/apps/approval/pb/rpc.proto",
}
