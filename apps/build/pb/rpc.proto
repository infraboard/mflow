syntax = "proto3";

package infraboard.mflow.build;
option go_package = "github.com/infraboard/mflow/apps/build";

import "mflow/apps/build/pb/build.proto";
import "mcube/pb/page/page.proto";
import "mcube/pb/request/request.proto";
import "mcube/pb/resource/meta.proto";
import "mcube/pb/resource/label.proto";

// RPC 服务构建配置
service RPC {
	rpc CreateBuildConfig(CreateBuildConfigRequest) returns(BuildConfig);
	rpc QueryBuildConfig(QueryBuildConfigRequest) returns(BuildConfigSet);
    rpc DescribeBuildConfig(DescribeBuildConfigRequst) returns(BuildConfig);
    rpc UpdateBuildConfig(UpdateBuildConfigRequest) returns(BuildConfig);
    rpc DeleteBuildConfig(DeleteBuildConfigRequest) returns(BuildConfig);
}

message RunBuildRequest {
    // 服务列表, 已可以手动指定需要执行构建的服务Id
    // @gotags: bson:"service_ids" json:"service_ids"
    repeated string service_ids = 2;
    // 自动部署相关配置
    // @gotags: bson:"auto_deploy_options" json:"auto_deploy_options"
    AutoDeployOptions auto_deploy_options = 3;
}

// 自动部署相关配置
message AutoDeployOptions {
    // 是否开启服务的自动部署,如果开启 构建成功后会执行自动部署
    // @gotags: bson:"enabled" json:"enabled"
    bool enabled  = 1;
    // 自动部署的环境列表, 那些环境允许执行自动部署
    // @gotags: bson:"envs" json:"envs"
    repeated string envs = 2;
}

message QueryBuildConfigRequest {
    // 资源范围
    // @gotags: json:"scope"
    mcube.resource.Scope scope = 1;
    // 资源标签过滤
    // @gotags: json:"filters"
    repeated mcube.resource.LabelRequirement filters = 2;
    // 分页参数
    // @gotags: json:"page"
    mcube.page.PageRequest page = 3;
    // 所属服务
    // @gotags: json:"service_ids"
    repeated string service_ids = 4;
    // 事件名称
    // @gotags: json:"event"
    string event = 5;
	// 分支名称
	// @gotags: json:"branche"
	string branche = 6;
	// 是否启用
	// @gotags: json:"enabled"
	optional bool enabled = 7;
    // 是否关联查询出Pipeline信息
	// @gotags: json:"with_pipeline"
	bool with_pipeline = 8;
}

message UpdateBuildConfigRequest {
    // 更新模式
    // @gotags: json:"update_mode"
    infraboard.mcube.request.UpdateMode update_mode = 1;
    // 构建配置Id
    // @gotags: json:"id"
    string id = 2;
    // 更新人
    // @gotags: json:"update_by"
    string update_by = 3;
    // 创建信息
    // @gotags: json:"spec"
    CreateBuildConfigRequest spec = 4;
}

message DeleteBuildConfigRequest {
    // 构建配置Id
    // @gotags: json:"id"
    string id = 1;
}

message DescribeBuildConfigRequst {
    // 构建配置Id
    // @gotags: json:"id" validate:"required"
    string id = 1; 
}