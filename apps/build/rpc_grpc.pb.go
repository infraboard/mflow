// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.0
// source: mflow/apps/build/pb/rpc.proto

package build

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RPC_CreateBuildConfig_FullMethodName   = "/infraboard.mflow.build.RPC/CreateBuildConfig"
	RPC_QueryBuildConfig_FullMethodName    = "/infraboard.mflow.build.RPC/QueryBuildConfig"
	RPC_DescribeBuildConfig_FullMethodName = "/infraboard.mflow.build.RPC/DescribeBuildConfig"
	RPC_UpdateBuildConfig_FullMethodName   = "/infraboard.mflow.build.RPC/UpdateBuildConfig"
	RPC_DeleteBuildConfig_FullMethodName   = "/infraboard.mflow.build.RPC/DeleteBuildConfig"
)

// RPCClient is the client API for RPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCClient interface {
	CreateBuildConfig(ctx context.Context, in *CreateBuildConfigRequest, opts ...grpc.CallOption) (*BuildConfig, error)
	QueryBuildConfig(ctx context.Context, in *QueryBuildConfigRequest, opts ...grpc.CallOption) (*BuildConfigSet, error)
	DescribeBuildConfig(ctx context.Context, in *DescribeBuildConfigRequst, opts ...grpc.CallOption) (*BuildConfig, error)
	UpdateBuildConfig(ctx context.Context, in *UpdateBuildConfigRequest, opts ...grpc.CallOption) (*BuildConfig, error)
	DeleteBuildConfig(ctx context.Context, in *DeleteBuildConfigRequest, opts ...grpc.CallOption) (*BuildConfig, error)
}

type rPCClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCClient(cc grpc.ClientConnInterface) RPCClient {
	return &rPCClient{cc}
}

func (c *rPCClient) CreateBuildConfig(ctx context.Context, in *CreateBuildConfigRequest, opts ...grpc.CallOption) (*BuildConfig, error) {
	out := new(BuildConfig)
	err := c.cc.Invoke(ctx, RPC_CreateBuildConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) QueryBuildConfig(ctx context.Context, in *QueryBuildConfigRequest, opts ...grpc.CallOption) (*BuildConfigSet, error) {
	out := new(BuildConfigSet)
	err := c.cc.Invoke(ctx, RPC_QueryBuildConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) DescribeBuildConfig(ctx context.Context, in *DescribeBuildConfigRequst, opts ...grpc.CallOption) (*BuildConfig, error) {
	out := new(BuildConfig)
	err := c.cc.Invoke(ctx, RPC_DescribeBuildConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) UpdateBuildConfig(ctx context.Context, in *UpdateBuildConfigRequest, opts ...grpc.CallOption) (*BuildConfig, error) {
	out := new(BuildConfig)
	err := c.cc.Invoke(ctx, RPC_UpdateBuildConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) DeleteBuildConfig(ctx context.Context, in *DeleteBuildConfigRequest, opts ...grpc.CallOption) (*BuildConfig, error) {
	out := new(BuildConfig)
	err := c.cc.Invoke(ctx, RPC_DeleteBuildConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCServer is the server API for RPC service.
// All implementations must embed UnimplementedRPCServer
// for forward compatibility
type RPCServer interface {
	CreateBuildConfig(context.Context, *CreateBuildConfigRequest) (*BuildConfig, error)
	QueryBuildConfig(context.Context, *QueryBuildConfigRequest) (*BuildConfigSet, error)
	DescribeBuildConfig(context.Context, *DescribeBuildConfigRequst) (*BuildConfig, error)
	UpdateBuildConfig(context.Context, *UpdateBuildConfigRequest) (*BuildConfig, error)
	DeleteBuildConfig(context.Context, *DeleteBuildConfigRequest) (*BuildConfig, error)
	mustEmbedUnimplementedRPCServer()
}

// UnimplementedRPCServer must be embedded to have forward compatible implementations.
type UnimplementedRPCServer struct {
}

func (UnimplementedRPCServer) CreateBuildConfig(context.Context, *CreateBuildConfigRequest) (*BuildConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBuildConfig not implemented")
}
func (UnimplementedRPCServer) QueryBuildConfig(context.Context, *QueryBuildConfigRequest) (*BuildConfigSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBuildConfig not implemented")
}
func (UnimplementedRPCServer) DescribeBuildConfig(context.Context, *DescribeBuildConfigRequst) (*BuildConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeBuildConfig not implemented")
}
func (UnimplementedRPCServer) UpdateBuildConfig(context.Context, *UpdateBuildConfigRequest) (*BuildConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBuildConfig not implemented")
}
func (UnimplementedRPCServer) DeleteBuildConfig(context.Context, *DeleteBuildConfigRequest) (*BuildConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBuildConfig not implemented")
}
func (UnimplementedRPCServer) mustEmbedUnimplementedRPCServer() {}

// UnsafeRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCServer will
// result in compilation errors.
type UnsafeRPCServer interface {
	mustEmbedUnimplementedRPCServer()
}

func RegisterRPCServer(s grpc.ServiceRegistrar, srv RPCServer) {
	s.RegisterService(&RPC_ServiceDesc, srv)
}

func _RPC_CreateBuildConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBuildConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).CreateBuildConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_CreateBuildConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).CreateBuildConfig(ctx, req.(*CreateBuildConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_QueryBuildConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBuildConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).QueryBuildConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_QueryBuildConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).QueryBuildConfig(ctx, req.(*QueryBuildConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_DescribeBuildConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeBuildConfigRequst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).DescribeBuildConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_DescribeBuildConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).DescribeBuildConfig(ctx, req.(*DescribeBuildConfigRequst))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_UpdateBuildConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBuildConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).UpdateBuildConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_UpdateBuildConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).UpdateBuildConfig(ctx, req.(*UpdateBuildConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_DeleteBuildConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBuildConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).DeleteBuildConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_DeleteBuildConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).DeleteBuildConfig(ctx, req.(*DeleteBuildConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RPC_ServiceDesc is the grpc.ServiceDesc for RPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "infraboard.mflow.build.RPC",
	HandlerType: (*RPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBuildConfig",
			Handler:    _RPC_CreateBuildConfig_Handler,
		},
		{
			MethodName: "QueryBuildConfig",
			Handler:    _RPC_QueryBuildConfig_Handler,
		},
		{
			MethodName: "DescribeBuildConfig",
			Handler:    _RPC_DescribeBuildConfig_Handler,
		},
		{
			MethodName: "UpdateBuildConfig",
			Handler:    _RPC_UpdateBuildConfig_Handler,
		},
		{
			MethodName: "DeleteBuildConfig",
			Handler:    _RPC_DeleteBuildConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mflow/apps/build/pb/rpc.proto",
}
