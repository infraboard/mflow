syntax = "proto3";

package infraboard.mflow.job;
option go_package = "github.com/infraboard/mflow/apps/job";

import "mcube/pb/resource/visiable.proto";
import "mcube/pb/resource/meta.proto";

// 执行方式
enum RUNNER_TYPE {
	// 基于K8s Job执行
	K8S_JOB = 0;
}

enum KUBE_CONF_FROM {
	// 手动填写 kubeconfig内容
	MANUAL = 0;
	// 引用mpaas提供的cluster id, 运行时 调用mpaas 动态查询
	MPAAS_K8S_CLUSTER_REF = 1;
}

// 用于从job的run_params中提取出job允许所必须的参数
message K8sJobRunnerParams {
    // 手动填写还是通过mpaas k8s cluster id 引用
	// @gotags: bson:"kube_config_from" json:"kube_config_from" param:"_kube_config_from"
	KUBE_CONF_FROM kube_config_from = 3;
    // 默认使用cluster提供的集群凭证, 但是往往由于集群托管凭证权限过大, 也可以单独给自定义的凭证
	// @gotags: bson:"kube_config" json:"kube_config" param:"_kube_config"
	string kube_config = 1;
    // Job运行的集群空间
	// @gotags: bson:"namespace" json:"namespace" param:"_namespace"
	string namespace = 2;
}

// JobSet 列表
message JobSet {
	// 总数量
	// @gotags: bson:"total" json:"total"
    int64 total = 1;
	// 清单
	// @gotags: bson:"items" json:"items"
    repeated Job items = 2;
}

message Job {
    // 元信息
    // @gotags: bson:",inline" json:"meta"
    infraboard.mcube.resource.Meta meta = 1;
    // job创建信息
	// @gotags: bson:",inline" json:"spec"
    CreateJobRequest spec = 2; 
    // job状态, 注意 Job是带有版本管理的
	// @gotags: bson:"status" json:"status"
    JobStatus status = 3; 
}

enum JOB_STAGE {
	// draft 草案, 未发布状态, 允许编辑
	DRAFT = 0;
	// published 已发布, 已发布的job不允许修改
	PUBLISHED = 1;
	// deprecated 已废弃, 已废弃的Job不允许再被使用
	DEPRECATED = 10;
}

message JobStatus {
    // job创建信息
	// @gotags: bson:"stage" json:"stage"
	JOB_STAGE stage = 1;
    // 发布的版本
    // @gotags: bson:"version" json:"version" validate:"required"
    string version = 2;
    // 发布时间
    // @gotags: bson:"change_at" json:"change_at"
    int64 change_at = 3;
    // 发布人
    // @gotags: bson:"change_by" json:"change_by"
    string change_by = 4;
    // 发布描述
    // @gotags: bson:"change_describe" json:"change_describe"
    string change_describe = 5;
}

enum RUN_MODE {
	// 正常运行
	NORMAL = 0;
	// 回滚运行
	ROLLBACK = 1;
}

message CreateJobRequest {
	// 执行器类型, 默认采用k8s job执行
	// @gotags: bson:"runner_type" json:"runner_type"
	RUNNER_TYPE runner_type = 1;
	// 执行器定义, 比如 k8s job 定义
	// @gotags: bson:"runner_spec" json:"runner_spec"
	string runner_spec = 2;
	// 手动更新Job的状态, 默认由job runner的operator更新
	// @gotags: bson:"manual_update_status" json:"manual_update_status"
	bool manual_update_status = 4;
	// 运行时 用户传人的参数说明
	// @gotags: bson:"run_params" json:"run_params"
	RunParamSet run_params = 5;
	// 是否允许回滚, 有些特殊的操作是不允许回滚的, 
	// 能使用上次执行成功的结果 进行执行 该任务就支持回滚
	// @gotags: bson:"allow_rollback" json:"allow_rollback"
	bool allow_rollback = 6;
	// 回滚参数, 当执行回滚时执行的参数, 往往由上次成功执行的参数进行填充
	// @gotags: bson:"rollback_param" json:"rollback_param"
	RunParamSet rollback_param = 7;
	// 所属域
	// @gotags: bson:"domain" json:"domain" validate:"required"
	string domain = 8;
	// 所属空间
	// @gotags: bson:"namespace" json:"namespace" validate:"required"
	string namespace = 9;
	// 创建人
	// @gotags: bson:"create_by" json:"create_by" validate:"required"
	string create_by = 10;
	// 图片
	// @gotags: bson:"logo" json:"logo"
	string logo = 11;
	// 图标
	// @gotags: bson:"icon" json:"icon"
	string icon = 16;
	// 名称, 不能包含特殊字符(. , #)
	// @gotags: bson:"name" json:"name" validate:"required"
	string name = 12;
	// 展示名称
	// @gotags: bson:"display_name" json:"display_name"
	string display_name = 13;
	// 是否是公开Job, 默认只能本空间内访问
	// @gotags: bson:"visiable_mode" json:"visiable_mode"
	mcube.resource.VISIABLE visiable_mode = 14;
	// 描述, Job功能概述
	// @gotags: bson:"description" json:"description"
	string description = 15;
	// Job 的Readme说明文档, 支持Markdown格式
	// @gotags: bson:"readme" json:"readme"
	string readme = 3;
	// 文档的URL地址
	// @gotags: bson:"document_url" json:"document_url"
	string document_url = 26;
	// 标签
	// @gotags: bson:"labels" json:"labels"
	map<string, string> labels = 24;
	// 扩展属性
	// @gotags: bson:"extension" json:"extension"
	map<string, string> extension = 25;
}

message RunParamSet {
	// 忽略失败, 当Pipeline运行时, 不会因为执行失败而 中断Pipeline执行
	// @gotags: bson:"ignore_failed" json:"ignore_failed"
	bool ignore_failed = 1;
	// 试运行
	// @gotags: bson:"dry_run" json:"dry_run"
	bool dry_run = 2;
	// 运行时 用户传人的参数说明
	// @gotags: bson:"params" json:"params"
	repeated RunParam params = 3;
}

enum PARAM_VALUE_TYPE {
	// 文本
	TEXT = 0;
	// 布尔值, 只能是ture或者false
	BOOLEAN = 1;
	// 枚举
	ENUM = 2;
	// 基于url的远程选项拉去, 仅存储URL地址, 前端自己处理
	HTTP_ENUM = 3;
	// k8s的 secret 名称
	K8S_CONFIG_MAP = 4;
	// k8s的 config map 名称
	K8S_SECRET = 5;
}

message EnumOption {
	// 选项的说明
	// @gotags: bson:"label" json:"label"
	string label = 1;
	// 选项的值
	// @gotags: bson:"value" json:"value" validate:"required"
	string value = 2;
	// 扩展属性
	// @gotags: bson:"extensions" json:"extensions"
	map<string, string> extensions = 15;
}

message HttpEnumConfig {
	// 基于枚举的URL, 注意只支持Get方法
	// @gotags: bson:"url" json:"url"
	string url = 1;
	// Enum Label映射的字段名
	// @gotags: bson:"enum_label_name" json:"enum_label_name"
	string enum_label_name = 2;
	// Enum Value映射的字段名
	// @gotags: bson:"enum_label_value" json:"enum_label_value"
	string enum_label_value = 3;
}

enum PARAM_USAGE_TYPE {
	// 环境变量
	ENV = 0;
	// 模版变量
	TEMPLATE = 1;
	// 执行器变量
	RUNNER = 2;
	// 系统内部参数, 有系统自动注入
	SYSTEM = 3;
}

message RunParam {
	// 可选/必传
	// @gotags: bson:"required" json:"required"
	bool required = 1;
	// 参数使用类型
	// @gotags: bson:"usage_type" json:"usage_type"
	PARAM_USAGE_TYPE usage_type = 2;
	// 参数名称
	// @gotags: bson:"name" json:"name" validate:"required"
	string name = 3;
	// 设置了值后，不允许修改, 用于控制流水线模版变量
	// @gotags: bson:"read_only" json:"read_only"
	bool read_only = 4;
	// 参数描述
	// @gotags: bson:"name_desc" json:"name_desc"
	string name_desc = 5;
	// 值类型
	// @gotags: bson:"value_type" json:"value_type"
	PARAM_VALUE_TYPE value_type = 6;
	// 枚举值的选项
	// @gotags: bson:"enum_options" json:"enum_options"
	repeated EnumOption enum_options = 7;
	// 基于Http枚举的配置
	// @gotags: bson:"http_enum_config" json:"http_enum_config"
	HttpEnumConfig http_enum_config = 8;
	// 值的样例
	// @gotags: bson:"example" json:"example"
	string example = 9;
	// 默认值, task运行时如果未传人，会填充默认值
	// @gotags: bson:"value" json:"value"
	string value = 10;
	// 值描述
	// @gotags: bson:"value_desc" json:"value_desc"
	string value_desc = 14;
	// 参数生效的范围
	// @gotags: bson:"param_scope" json:"param_scope"
	ParamScope param_scope = 11;
	// 是否加入到过滤标签中, 方便过滤搜索, 默认不会加入到搜索标签中
	// @gotags: bson:"search_label" json:"search_label"
	bool search_label = 12;
	// 是否是敏感信息, 比如密码之类的, 如果是，显示的时候需要做脱敏处理
	// @gotags: bson:"is_sensitive" json:"is_sensitive"
	bool is_sensitive = 13;
	// 是否废弃
	// @gotags: bson:"deprecate" json:"deprecate"
	bool deprecate = 16;
	// 废弃说明
	// @gotags: bson:"deprecate_desc" json:"deprecate_desc"
	string deprecate_desc = 17;

	// 扩展属性
	// @gotags: bson:"extensions" json:"extensions"
	map<string, string> extensions = 15;
}

// 参数生效的范围
message ParamScope {
	// 作用与Stage
	// @gotags: bson:"stage" json:"stage"
	string stage = 1;
	// 作用与Job
	// @gotags: bson:"task" json:"task"
	string task = 2;
	// 作用于标签
	// @gotags: bson:"label" json:"label"
	map<string, string> label = 3;
}