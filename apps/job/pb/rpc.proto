syntax = "proto3";

package infraboard.mflow.job;
option go_package = "github.com/infraboard/mflow/apps/job";

import "mflow/apps/job/pb/job.proto";
import "mcube/pb/page/page.proto";
import "mcube/pb/resource/label.proto";
import "mcube/pb/request/request.proto";
import "mcube/pb/resource/meta.proto";
import "mcube/pb/resource/visiable.proto";

// RPC Job定义
service RPC {
    rpc CreateJob(CreateJobRequest) returns(Job);
    rpc QueryJob(QueryJobRequest) returns(JobSet);
    rpc DescribeJob(DescribeJobRequest) returns(Job);
    rpc UpdateJob(UpdateJobRequest) returns(Job);

    // 编辑job状态, 比如发布
    rpc UpdateJobStatus(UpdateJobStatusRequest) returns(Job);
}

message QueryJobRequest {
    // 资源范围
    // @gotags: json:"mscopeeta"
    mcube.resource.Scope scope = 1;
    // 资源标签过滤
    // @gotags: json:"filters"
    repeated mcube.resource.LabelRequirement filters = 2;
    // 分页请求
    // @gotags: json:"page"
    infraboard.mcube.page.PageRequest page = 3;
    // 是否是公开Job, 默认只能本空间内访问
	// @gotags: bson:"visiable_mode" json:"visiable_mode"
	optional mcube.resource.VISIABLE visiable_mode = 4;
    // job Id列表
    // @gotags: json:"ids"
    repeated string ids = 5;
    // job 名称列表
    // @gotags: json:"names"
    repeated string names = 6;
    // 是否注入k8s集群选项
    // @gotags: json:"inject_k8s_cluster"
    bool inject_k8s_cluster = 8;
    // job 标签
    // @gotags: json:"label"
    map<string,string> label = 7;
}


enum DESCRIBE_BY {
    // Job的ID
    JOB_ID = 0;
    // Job的唯一名称, <job_name>@<namespace>.<domain>:<job_version>
    JOB_UNIQ_NAME = 1;
}

message DescribeJobRequest {
    // 资源范围
    // @gotags: json:"mscopeeta"
    mcube.resource.Scope scope = 3;
    // 查询方式
    // @gotags: json:"describe_by"
    DESCRIBE_BY describe_by = 1;
    // 查询值
    // @gotags: json:"describe_value"  validate:"required"
    string describe_value = 2;
}

message UpdateJobRequest {
    // Cluster id
    // @gotags: json:"id"
    string id = 1;
    // 更新模式
    // @gotags: json:"update_mode"
    infraboard.mcube.request.UpdateMode update_mode = 2;
    // 更新人
    // @gotags: json:"update_by"
    string update_by = 3;
    // 更新时间
    // @gotags: json:"update_at"
    int64 update_at = 4;
    // 更新的信息
    // @gotags: json:"spec"
    CreateJobRequest spec = 5;
}

message UpdateJobStatusRequest {
    // job id
    // @gotags: json:"id" validate:"required"
    string id = 1;
    // job状态, 注意 Job是带有版本管理的
	// @gotags: bson:"status" json:"status"
    JobStatus status = 2;
}

message DeleteJobRequest {
    // job id
    // @gotags: json:"id" validate:"required"
    string id = 1;
}