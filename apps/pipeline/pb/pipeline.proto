syntax = "proto3";

package infraboard.mflow.pipeline;
option go_package = "github.com/infraboard/mflow/apps/pipeline";

import "mcube/pb/resource/meta.proto";
import "mflow/apps/job/pb/job.proto";
import "mcenter/apps/notify/pb/notify.proto";
import "mcube/pb/resource/visiable.proto";

message PipelineSet {
	// 总数量
	// @gotags: bson:"total" json:"total"
    int64 total = 1;
	// 清单
	// @gotags: bson:"items" json:"items"
    repeated Pipeline items = 2;
}

// 流水线
message Pipeline {
    // 元信息
    // @gotags: bson:",inline" json:"meta"
    infraboard.mcube.resource.Meta meta = 1;
	// 流水线定义
	// @gotags: bson:",inline" json:"spec"
	CreatePipelineRequest spec = 2;
}

message CreatePipelineRequest {
	// 所属域
	// @gotags: bson:"domain" json:"domain"
	string domain = 1;
	// 所属空间
	// @gotags: bson:"namespace" json:"namespace"
	string namespace = 2;
	// 创建人
	// @gotags: bson:"create_by" json:"create_by"
	string create_by = 3;
    // 名称
	// @gotags: bson:"name" json:"name" validate:"required"
    string name = 4;
	// 描述
	// @gotags: bson:"description" json:"description"
	string description = 5;
	// 图标
	// @gotags: bson:"logo" json:"logo"
	string logo = 10;
	// 是否需要审核才能执行, 默认不需要审核
	// @gotags: bson:"required_approval" json:"required_approval"
	bool required_approval = 6;
	// 是否允许并行允许, 默认为false, 同一时间只能有一个运行中的任务
	// @gotags: bson:"is_parallel" json:"is_parallel"
	bool is_parallel = 7;
	// 是否是模版, 用于快速继承模版参数进行修改, 模版不能用于执行
	// @gotags: bson:"is_template" json:"is_template"
	bool is_template = 8;
	// 是否是公开Job, 默认只能本空间内访问
	// @gotags: bson:"visiable_mode" json:"visiable_mode"
	mcube.resource.VISIABLE visiable_mode = 16;
	// 运行时 全局参数, 会传递给每个stage的每个Task
	// @gotags: bson:"with" json:"with"
	repeated job.RunParam with = 9;
	// 具体编排阶段
	// @gotags: bson:"stages" json:"stages"
	repeated Stage stages = 12;
	// WebHook配置, 及时把job执行状态推送给外部, 常用于外部系统的集成，比如飞书机器人
	// @gotags: bson:"webhooks" json:"webhooks"
	repeated WebHook webhooks = 13;
	// Pipeline的关注人, 关注后会及时把任务运行状态通知给他们
	// @gotags: bson:"mention_users" json:"mention_users"
	repeated MentionUser mention_users = 11;
	// 下一个需要运行的Pipeline, 多个Pipeline编排时指定先后顺序
	// @gotags: bson:"next_pipeline" json:"next_pipeline"
	string next_pipeline = 14;
	// 标签
	// @gotags: bson:"labels" json:"labels"
	map<string, string> labels = 15;
}

// Stage todo
message Stage {
    // 编号
	// @gotags: bson:"number" json:"number"
    int32 number = 3;
    // 名称
	// @gotags: bson:"name" json:"name" validate:"required"
    string name = 1;
	// 是否并行, 如果并行执行 该Task里面的任务会同时执行, 否则串行
	// @gotags: bson:"is_parallel" json:"is_parallel"
	bool is_parallel = 2;
	// 运行时 全局参数, 会传递给该stage的每个Task
	// @gotags: bson:"with" json:"with"
	repeated job.RunParam with = 10;
	// 需要执行的job
	// @gotags: bson:"tasks" json:"tasks"
	repeated RunJobRequest tasks = 11;
}

message RunJobRequest {
    // 忽略执行
	// @gotags: bson:"skip_run" json:"skip_run"
    bool skip_run = 16;
    // 编号
	// @gotags: bson:"number" json:"number"
    int32 number = 15;
    // 任务唯一ID, 如果不传，则由系统自动生成
	// @gotags: bson:"_id" json:"task_id,omitempty"
    string task_id = 1;
    // 任务是谁运行的
	// @gotags: bson:"run_by" json:"run_by"
    string run_by = 18;
    // 任务状态需要手动更新时的Token
	// @gotags: bson:"token" json:"token"
    string update_token = 2;
	// task执行的域
	// @gotags: bson:"domain" json:"domain"
    string domain = 3;
	// task执行的空间
	// @gotags: bson:"namespace" json:"namespace"
    string namespace = 4;
	// task属于那个Pipeline, 可以为空
	// @gotags: bson:"pipeline_task" json:"pipeline_task"
    string pipeline_task = 5;
	// task属于那个stage 名称, 可以为空
	// @gotags: bson:"stage_name" json:"stage_name"
    string stage_name = 6;
	// task属于那个stage 编号, 可以为空
	// @gotags: bson:"stage_number" json:"stage_number"
    int32 stage_number = 22;
	// 任务名称
	// @gotags: bson:"task_name" json:"task_name" validate:"required"
    string task_name = 14;
	// job名称: name
	// @gotags: bson:"job_name" json:"job_name" validate:"required"
    string job_name = 7;
	// job名称: name
	// @gotags: bson:"job_id" json:"job_id"
    string job_id = 19;
	// 运行模式
	// @gotags: bson:"run_mode" json:"run_mode"
	job.RUN_MODE run_mode = 8;
	// job运行时参数
	// @gotags: bson:"run_params" json:"run_params"
	job.RunParamSet run_params = 9;
	// job回滚时参数, 如果要回滚 则回滚参数必填
	// @gotags: bson:"rollback_params" json:"rollback_params"
	job.RunParamSet rollback_params = 10;
	// WebHook配置, 及时把job执行状态推送给外部, 常用于外部系统的集成，比如飞书机器人
	// @gotags: bson:"webhooks" json:"webhooks"
	repeated WebHook webhooks = 13;
	// 任务的关注人, 关注后会及时把任务运行状态通知给他们
	// @gotags: bson:"mention_users" json:"mention_users"
	repeated MentionUser mention_users = 17;
    // 任务扩展字段
    // @gotags: bson:"extension" json:"extension"
    map<string,string> extension = 24;
    // 任务标签
    // @gotags: bson:"labels" json:"labels"
    map<string,string> labels = 25;
	// 补充Task关联Job信息
	// @gotags: bson:"job" json:"job"
	job.Job job = 21;
}

// 关注人
message MentionUser {
	// 关注的人
	// @gotags: bson:"user_name" json:"user_name" validate:"required"
    string user_name = 1;
	// 通知方式
	// @gotags: bson:"notify_type" json:"notify_type"
	repeated infraboard.mcenter.notify.NOTIFY_TYPE notify_types = 2;
	// 那些状态下触发通知, 默认任务执行成功后触发
	// @gotags: bson:"events" json:"events"
	repeated string events = 3;
	// 备注信息, 比如发布任务执行成功, 可以备注: 请及时测试
	// @gotags: bson:"comment" json:"comment"
    string comment = 4;
}


enum TRIGGER_MODE  {
	// 人工手动触发
	MANUAL = 0;
	// 基于事件触发, 比如Gitlab事件
	EVENT = 1;
	// 基于申请单触发
	APPROVAL = 2;
}

message RunPipelineRequest {
    // pipeline id
	// @gotags: bson:"domain" json:"domain"
    string domain = 1;
    // pipeline id
	// @gotags: bson:"namespace" json:"namespace" 
    string namespace = 2;
    // pipeline运行任务id, 如果没传 会自动生成
	// @gotags: bson:"pipeline_task_id" json:"pipeline_task_id,omitempty"
    string pipeline_task_id = 3;
    // pipeline id
	// @gotags: bson:"pipeline_id" json:"pipeline_id" validate:"required"
    string pipeline_id = 4;
	// 运行模式
	// @gotags: bson:"run_mode" json:"run_mode"
	job.RUN_MODE run_mode = 5;
	// 试运行
	// @gotags: bson:"dry_run" json:"dry_run"
	bool dry_run = 6;
	// 触发方式, 默认手工触发
	// @gotags: bson:"trigger_mode" json:"trigger_mode" 
	TRIGGER_MODE  trigger_mode = 7;
	// 执行人
	// @gotags: bson:"run_by" json:"run_by" validate:"required"
	string run_by = 8;
    // 审核单Id, 如果pipeline需要审核才能执行, 则该参数必传
	// @gotags: bson:"approval_id" json:"approval_id"
    string approval_id = 10;
	// Pipeline 的运行时参数
	// @gotags: bson:"run_params" json:"run_params"
	repeated job.RunParam run_params = 9;
	// 任务标签
	// @gotags: bson:"labels" json:"labels"
	map<string, string> labels = 15;
}

message WebHook {
	// POST URL
	// @gotags: bson:"url" json:"url" validate:"required,url"
	string url = 1;
	// 需要自定义添加的头, 用于身份认证
	// @gotags: bson:"header" json:"header"
	map<string, string> header = 2;
	// 那些状态下触发, 默认所有状态变更都触发, 不区分大小写
	// @gotags: bson:"events" json:"events"
	repeated string events = 3;
	// 简单的描述信息
	// @gotags: bson:"description" json:"description"
	string description = 4;
}