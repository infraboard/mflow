// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.26.0
// source: mflow/apps/pipeline/pb/pipeline.proto

package pipeline

import (
	notify "github.com/infraboard/mcenter/apps/notify"
	resource "github.com/infraboard/mcube/v2/pb/resource"
	job "github.com/infraboard/mflow/apps/job"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TRIGGER_MODE int32

const (
	// 人工手动触发
	TRIGGER_MODE_MANUAL TRIGGER_MODE = 0
	// 基于事件触发, 比如Gitlab事件
	TRIGGER_MODE_EVENT TRIGGER_MODE = 1
	// 基于申请单触发
	TRIGGER_MODE_APPROVAL TRIGGER_MODE = 2
)

// Enum value maps for TRIGGER_MODE.
var (
	TRIGGER_MODE_name = map[int32]string{
		0: "MANUAL",
		1: "EVENT",
		2: "APPROVAL",
	}
	TRIGGER_MODE_value = map[string]int32{
		"MANUAL":   0,
		"EVENT":    1,
		"APPROVAL": 2,
	}
)

func (x TRIGGER_MODE) Enum() *TRIGGER_MODE {
	p := new(TRIGGER_MODE)
	*p = x
	return p
}

func (x TRIGGER_MODE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TRIGGER_MODE) Descriptor() protoreflect.EnumDescriptor {
	return file_mflow_apps_pipeline_pb_pipeline_proto_enumTypes[0].Descriptor()
}

func (TRIGGER_MODE) Type() protoreflect.EnumType {
	return &file_mflow_apps_pipeline_pb_pipeline_proto_enumTypes[0]
}

func (x TRIGGER_MODE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TRIGGER_MODE.Descriptor instead.
func (TRIGGER_MODE) EnumDescriptor() ([]byte, []int) {
	return file_mflow_apps_pipeline_pb_pipeline_proto_rawDescGZIP(), []int{0}
}

type PipelineSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 总数量
	// @gotags: bson:"total" json:"total"
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total" bson:"total"`
	// 清单
	// @gotags: bson:"items" json:"items"
	Items []*Pipeline `protobuf:"bytes,2,rep,name=items,proto3" json:"items" bson:"items"`
}

func (x *PipelineSet) Reset() {
	*x = PipelineSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mflow_apps_pipeline_pb_pipeline_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineSet) ProtoMessage() {}

func (x *PipelineSet) ProtoReflect() protoreflect.Message {
	mi := &file_mflow_apps_pipeline_pb_pipeline_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineSet.ProtoReflect.Descriptor instead.
func (*PipelineSet) Descriptor() ([]byte, []int) {
	return file_mflow_apps_pipeline_pb_pipeline_proto_rawDescGZIP(), []int{0}
}

func (x *PipelineSet) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PipelineSet) GetItems() []*Pipeline {
	if x != nil {
		return x.Items
	}
	return nil
}

// 流水线
type Pipeline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 元信息
	// @gotags: bson:",inline" json:"meta"
	Meta *resource.Meta `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta" bson:",inline"`
	// 流水线定义
	// @gotags: bson:",inline" json:"spec"
	Spec *CreatePipelineRequest `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec" bson:",inline"`
}

func (x *Pipeline) Reset() {
	*x = Pipeline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mflow_apps_pipeline_pb_pipeline_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pipeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pipeline) ProtoMessage() {}

func (x *Pipeline) ProtoReflect() protoreflect.Message {
	mi := &file_mflow_apps_pipeline_pb_pipeline_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pipeline.ProtoReflect.Descriptor instead.
func (*Pipeline) Descriptor() ([]byte, []int) {
	return file_mflow_apps_pipeline_pb_pipeline_proto_rawDescGZIP(), []int{1}
}

func (x *Pipeline) GetMeta() *resource.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Pipeline) GetSpec() *CreatePipelineRequest {
	if x != nil {
		return x.Spec
	}
	return nil
}

type CreatePipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 所属域
	// @gotags: bson:"domain" json:"domain"
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain" bson:"domain"`
	// 所属空间
	// @gotags: bson:"namespace" json:"namespace"
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace" bson:"namespace"`
	// 创建人
	// @gotags: bson:"create_by" json:"create_by"
	CreateBy string `protobuf:"bytes,3,opt,name=create_by,json=createBy,proto3" json:"create_by" bson:"create_by"`
	// 名称
	// @gotags: bson:"name" json:"name" validate:"required"
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name" bson:"name" validate:"required"`
	// 描述
	// @gotags: bson:"description" json:"description"
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description" bson:"description"`
	// 图标
	// @gotags: bson:"logo" json:"logo"
	Logo string `protobuf:"bytes,10,opt,name=logo,proto3" json:"logo" bson:"logo"`
	// 是否需要审核才能执行, 默认不需要审核
	// @gotags: bson:"required_approval" json:"required_approval"
	RequiredApproval bool `protobuf:"varint,6,opt,name=required_approval,json=requiredApproval,proto3" json:"required_approval" bson:"required_approval"`
	// 是否允许并行允许, 默认为false, 同一时间只能有一个运行中的任务
	// @gotags: bson:"is_parallel" json:"is_parallel"
	IsParallel bool `protobuf:"varint,7,opt,name=is_parallel,json=isParallel,proto3" json:"is_parallel" bson:"is_parallel"`
	// 是否是模版, 用于快速继承模版参数进行修改, 模版不能用于执行
	// @gotags: bson:"is_template" json:"is_template"
	IsTemplate bool `protobuf:"varint,8,opt,name=is_template,json=isTemplate,proto3" json:"is_template" bson:"is_template"`
	// 是否是公开Job, 默认只能本空间内访问
	// @gotags: bson:"visiable_mode" json:"visiable_mode"
	VisiableMode resource.VISIABLE `protobuf:"varint,16,opt,name=visiable_mode,json=visiableMode,proto3,enum=infraboard.mcube.resource.VISIABLE" json:"visiable_mode" bson:"visiable_mode"`
	// 运行时 全局参数, 会传递给每个stage的每个Task
	// @gotags: bson:"with" json:"with"
	With []*job.RunParam `protobuf:"bytes,9,rep,name=with,proto3" json:"with" bson:"with"`
	// 具体编排阶段
	// @gotags: bson:"stages" json:"stages"
	Stages []*Stage `protobuf:"bytes,12,rep,name=stages,proto3" json:"stages" bson:"stages"`
	// WebHook配置, 及时把job执行状态推送给外部, 常用于外部系统的集成，比如飞书机器人
	// @gotags: bson:"webhooks" json:"webhooks"
	Webhooks []*WebHook `protobuf:"bytes,13,rep,name=webhooks,proto3" json:"webhooks" bson:"webhooks"`
	// Pipeline的关注人, 关注后会及时把任务运行状态通知给他们
	// @gotags: bson:"mention_users" json:"mention_users"
	MentionUsers []*MentionUser `protobuf:"bytes,11,rep,name=mention_users,json=mentionUsers,proto3" json:"mention_users" bson:"mention_users"`
	// 下一个需要运行的Pipeline, 多个Pipeline编排时指定先后顺序
	// @gotags: bson:"next_pipeline" json:"next_pipeline"
	NextPipeline string `protobuf:"bytes,14,opt,name=next_pipeline,json=nextPipeline,proto3" json:"next_pipeline" bson:"next_pipeline"`
	// 标签
	// @gotags: bson:"labels" json:"labels"
	Labels map[string]string `protobuf:"bytes,15,rep,name=labels,proto3" json:"labels" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"labels"`
}

func (x *CreatePipelineRequest) Reset() {
	*x = CreatePipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mflow_apps_pipeline_pb_pipeline_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePipelineRequest) ProtoMessage() {}

func (x *CreatePipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mflow_apps_pipeline_pb_pipeline_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePipelineRequest.ProtoReflect.Descriptor instead.
func (*CreatePipelineRequest) Descriptor() ([]byte, []int) {
	return file_mflow_apps_pipeline_pb_pipeline_proto_rawDescGZIP(), []int{2}
}

func (x *CreatePipelineRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *CreatePipelineRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CreatePipelineRequest) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *CreatePipelineRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreatePipelineRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreatePipelineRequest) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *CreatePipelineRequest) GetRequiredApproval() bool {
	if x != nil {
		return x.RequiredApproval
	}
	return false
}

func (x *CreatePipelineRequest) GetIsParallel() bool {
	if x != nil {
		return x.IsParallel
	}
	return false
}

func (x *CreatePipelineRequest) GetIsTemplate() bool {
	if x != nil {
		return x.IsTemplate
	}
	return false
}

func (x *CreatePipelineRequest) GetVisiableMode() resource.VISIABLE {
	if x != nil {
		return x.VisiableMode
	}
	return resource.VISIABLE(0)
}

func (x *CreatePipelineRequest) GetWith() []*job.RunParam {
	if x != nil {
		return x.With
	}
	return nil
}

func (x *CreatePipelineRequest) GetStages() []*Stage {
	if x != nil {
		return x.Stages
	}
	return nil
}

func (x *CreatePipelineRequest) GetWebhooks() []*WebHook {
	if x != nil {
		return x.Webhooks
	}
	return nil
}

func (x *CreatePipelineRequest) GetMentionUsers() []*MentionUser {
	if x != nil {
		return x.MentionUsers
	}
	return nil
}

func (x *CreatePipelineRequest) GetNextPipeline() string {
	if x != nil {
		return x.NextPipeline
	}
	return ""
}

func (x *CreatePipelineRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// Stage todo
type Stage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 编号
	// @gotags: bson:"number" json:"number"
	Number int32 `protobuf:"varint,3,opt,name=number,proto3" json:"number" bson:"number"`
	// 名称
	// @gotags: bson:"name" json:"name" validate:"required"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name" bson:"name" validate:"required"`
	// 是否并行, 如果并行执行 该Task里面的任务会同时执行, 否则串行
	// @gotags: bson:"is_parallel" json:"is_parallel"
	IsParallel bool `protobuf:"varint,2,opt,name=is_parallel,json=isParallel,proto3" json:"is_parallel" bson:"is_parallel"`
	// 运行时 全局参数, 会传递给该stage的每个Task
	// @gotags: bson:"with" json:"with"
	With []*job.RunParam `protobuf:"bytes,10,rep,name=with,proto3" json:"with" bson:"with"`
	// 需要执行的job
	// @gotags: bson:"jobs" json:"jobs"
	Jobs []*RunJobRequest `protobuf:"bytes,11,rep,name=jobs,proto3" json:"jobs" bson:"jobs"`
}

func (x *Stage) Reset() {
	*x = Stage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mflow_apps_pipeline_pb_pipeline_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stage) ProtoMessage() {}

func (x *Stage) ProtoReflect() protoreflect.Message {
	mi := &file_mflow_apps_pipeline_pb_pipeline_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stage.ProtoReflect.Descriptor instead.
func (*Stage) Descriptor() ([]byte, []int) {
	return file_mflow_apps_pipeline_pb_pipeline_proto_rawDescGZIP(), []int{3}
}

func (x *Stage) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *Stage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Stage) GetIsParallel() bool {
	if x != nil {
		return x.IsParallel
	}
	return false
}

func (x *Stage) GetWith() []*job.RunParam {
	if x != nil {
		return x.With
	}
	return nil
}

func (x *Stage) GetJobs() []*RunJobRequest {
	if x != nil {
		return x.Jobs
	}
	return nil
}

type RunJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 忽略执行
	// @gotags: bson:"skip_run" json:"skip_run"
	SkipRun bool `protobuf:"varint,16,opt,name=skip_run,json=skipRun,proto3" json:"skip_run" bson:"skip_run"`
	// 编号
	// @gotags: bson:"number" json:"number"
	Number int32 `protobuf:"varint,15,opt,name=number,proto3" json:"number" bson:"number"`
	// 任务唯一ID, 如果不传，则由系统自动生成
	// @gotags: bson:"_id" json:"task_id,omitempty"
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty" bson:"_id"`
	// 任务是谁运行的
	// @gotags: bson:"run_by" json:"run_by"
	RunBy string `protobuf:"bytes,18,opt,name=run_by,json=runBy,proto3" json:"run_by" bson:"run_by"`
	// 任务状态需要手动更新时的Token
	// @gotags: bson:"token" json:"token"
	UpdateToken string `protobuf:"bytes,2,opt,name=update_token,json=updateToken,proto3" json:"token" bson:"token"`
	// task执行的域
	// @gotags: bson:"domain" json:"domain"
	Domain string `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain" bson:"domain"`
	// task执行的空间
	// @gotags: bson:"namespace" json:"namespace"
	Namespace string `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace" bson:"namespace"`
	// task属于那个Pipeline, 可以为空
	// @gotags: bson:"pipeline_task" json:"pipeline_task"
	PipelineTask string `protobuf:"bytes,5,opt,name=pipeline_task,json=pipelineTask,proto3" json:"pipeline_task" bson:"pipeline_task"`
	// task属于那个stage, 可以为空
	// @gotags: bson:"stage_name" json:"stage_name"
	StageName string `protobuf:"bytes,6,opt,name=stage_name,json=stageName,proto3" json:"stage_name" bson:"stage_name"`
	// 任务名称
	// @gotags: bson:"task_name" json:"task_name" validate:"required"
	TaskName string `protobuf:"bytes,14,opt,name=task_name,json=taskName,proto3" json:"task_name" bson:"task_name" validate:"required"`
	// job名称: name
	// @gotags: bson:"job_name" json:"job_name" validate:"required"
	JobName string `protobuf:"bytes,7,opt,name=job_name,json=jobName,proto3" json:"job_name" bson:"job_name" validate:"required"`
	// 运行模式
	// @gotags: bson:"run_mode" json:"run_mode"
	RunMode job.RUN_MODE `protobuf:"varint,8,opt,name=run_mode,json=runMode,proto3,enum=infraboard.mflow.job.RUN_MODE" json:"run_mode" bson:"run_mode"`
	// job运行时参数
	// @gotags: bson:"run_params" json:"run_params"
	RunParams *job.RunParamSet `protobuf:"bytes,9,opt,name=run_params,json=runParams,proto3" json:"run_params" bson:"run_params"`
	// job回滚时参数, 如果要回滚 则回滚参数必填
	// @gotags: bson:"rollback_params" json:"rollback_params"
	RollbackParams *job.RunParamSet `protobuf:"bytes,10,opt,name=rollback_params,json=rollbackParams,proto3" json:"rollback_params" bson:"rollback_params"`
	// WebHook配置, 及时把job执行状态推送给外部, 常用于外部系统的集成，比如飞书机器人
	// @gotags: bson:"webhooks" json:"webhooks"
	Webhooks []*WebHook `protobuf:"bytes,13,rep,name=webhooks,proto3" json:"webhooks" bson:"webhooks"`
	// 任务的关注人, 关注后会及时把任务运行状态通知给他们
	// @gotags: bson:"mention_users" json:"mention_users"
	MentionUsers []*MentionUser `protobuf:"bytes,17,rep,name=mention_users,json=mentionUsers,proto3" json:"mention_users" bson:"mention_users"`
	// 任务扩展字段
	// @gotags: bson:"extension" json:"extension"
	Extension map[string]string `protobuf:"bytes,24,rep,name=extension,proto3" json:"extension" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"extension"`
	// 任务标签
	// @gotags: bson:"labels" json:"labels"
	Labels map[string]string `protobuf:"bytes,25,rep,name=labels,proto3" json:"labels" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"labels"`
}

func (x *RunJobRequest) Reset() {
	*x = RunJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mflow_apps_pipeline_pb_pipeline_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunJobRequest) ProtoMessage() {}

func (x *RunJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mflow_apps_pipeline_pb_pipeline_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunJobRequest.ProtoReflect.Descriptor instead.
func (*RunJobRequest) Descriptor() ([]byte, []int) {
	return file_mflow_apps_pipeline_pb_pipeline_proto_rawDescGZIP(), []int{4}
}

func (x *RunJobRequest) GetSkipRun() bool {
	if x != nil {
		return x.SkipRun
	}
	return false
}

func (x *RunJobRequest) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *RunJobRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *RunJobRequest) GetRunBy() string {
	if x != nil {
		return x.RunBy
	}
	return ""
}

func (x *RunJobRequest) GetUpdateToken() string {
	if x != nil {
		return x.UpdateToken
	}
	return ""
}

func (x *RunJobRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *RunJobRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *RunJobRequest) GetPipelineTask() string {
	if x != nil {
		return x.PipelineTask
	}
	return ""
}

func (x *RunJobRequest) GetStageName() string {
	if x != nil {
		return x.StageName
	}
	return ""
}

func (x *RunJobRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *RunJobRequest) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

func (x *RunJobRequest) GetRunMode() job.RUN_MODE {
	if x != nil {
		return x.RunMode
	}
	return job.RUN_MODE(0)
}

func (x *RunJobRequest) GetRunParams() *job.RunParamSet {
	if x != nil {
		return x.RunParams
	}
	return nil
}

func (x *RunJobRequest) GetRollbackParams() *job.RunParamSet {
	if x != nil {
		return x.RollbackParams
	}
	return nil
}

func (x *RunJobRequest) GetWebhooks() []*WebHook {
	if x != nil {
		return x.Webhooks
	}
	return nil
}

func (x *RunJobRequest) GetMentionUsers() []*MentionUser {
	if x != nil {
		return x.MentionUsers
	}
	return nil
}

func (x *RunJobRequest) GetExtension() map[string]string {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *RunJobRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// 关注人
type MentionUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 关注的人
	// @gotags: bson:"user_name" json:"user_name" validate:"required"
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name" bson:"user_name" validate:"required"`
	// 通知方式
	// @gotags: bson:"notify_type" json:"notify_type"
	NotifyTypes []notify.NOTIFY_TYPE `protobuf:"varint,2,rep,packed,name=notify_types,json=notifyTypes,proto3,enum=infraboard.mcenter.notify.NOTIFY_TYPE" json:"notify_type" bson:"notify_type"`
	// 那些状态下触发通知, 默认任务执行成功后触发
	// @gotags: bson:"events" json:"events"
	Events []string `protobuf:"bytes,3,rep,name=events,proto3" json:"events" bson:"events"`
	// 备注信息, 比如发布任务执行成功, 可以备注: 请及时测试
	// @gotags: bson:"comment" json:"comment"
	Comment string `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment" bson:"comment"`
}

func (x *MentionUser) Reset() {
	*x = MentionUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mflow_apps_pipeline_pb_pipeline_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MentionUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MentionUser) ProtoMessage() {}

func (x *MentionUser) ProtoReflect() protoreflect.Message {
	mi := &file_mflow_apps_pipeline_pb_pipeline_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MentionUser.ProtoReflect.Descriptor instead.
func (*MentionUser) Descriptor() ([]byte, []int) {
	return file_mflow_apps_pipeline_pb_pipeline_proto_rawDescGZIP(), []int{5}
}

func (x *MentionUser) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *MentionUser) GetNotifyTypes() []notify.NOTIFY_TYPE {
	if x != nil {
		return x.NotifyTypes
	}
	return nil
}

func (x *MentionUser) GetEvents() []string {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *MentionUser) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type RunPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pipeline id
	// @gotags: bson:"domain" json:"domain"
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain" bson:"domain"`
	// pipeline id
	// @gotags: bson:"namespace" json:"namespace"
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace" bson:"namespace"`
	// pipeline运行任务id, 如果没传 会自动生成
	// @gotags: bson:"pipeline_task_id" json:"pipeline_task_id,omitempty"
	PipelineTaskId string `protobuf:"bytes,3,opt,name=pipeline_task_id,json=pipelineTaskId,proto3" json:"pipeline_task_id,omitempty" bson:"pipeline_task_id"`
	// pipeline id
	// @gotags: bson:"pipeline_id" json:"pipeline_id" validate:"required"
	PipelineId string `protobuf:"bytes,4,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id" bson:"pipeline_id" validate:"required"`
	// 运行模式
	// @gotags: bson:"run_mode" json:"run_mode"
	RunMode job.RUN_MODE `protobuf:"varint,5,opt,name=run_mode,json=runMode,proto3,enum=infraboard.mflow.job.RUN_MODE" json:"run_mode" bson:"run_mode"`
	// 试运行
	// @gotags: bson:"dry_run" json:"dry_run"
	DryRun bool `protobuf:"varint,6,opt,name=dry_run,json=dryRun,proto3" json:"dry_run" bson:"dry_run"`
	// 触发方式, 默认手工触发
	// @gotags: bson:"trigger_mode" json:"trigger_mode"
	TriggerMode TRIGGER_MODE `protobuf:"varint,7,opt,name=trigger_mode,json=triggerMode,proto3,enum=infraboard.mflow.pipeline.TRIGGER_MODE" json:"trigger_mode" bson:"trigger_mode"`
	// 执行人
	// @gotags: bson:"run_by" json:"run_by" validate:"required"
	RunBy string `protobuf:"bytes,8,opt,name=run_by,json=runBy,proto3" json:"run_by" bson:"run_by" validate:"required"`
	// 审核单Id, 如果pipeline需要审核才能执行, 则该参数必传
	// @gotags: bson:"approval_id" json:"approval_id"
	ApprovalId string `protobuf:"bytes,10,opt,name=approval_id,json=approvalId,proto3" json:"approval_id" bson:"approval_id"`
	// Pipeline 的运行时参数
	// @gotags: bson:"run_params" json:"run_params"
	RunParams []*job.RunParam `protobuf:"bytes,9,rep,name=run_params,json=runParams,proto3" json:"run_params" bson:"run_params"`
	// 任务标签
	// @gotags: bson:"labels" json:"labels"
	Labels map[string]string `protobuf:"bytes,15,rep,name=labels,proto3" json:"labels" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"labels"`
}

func (x *RunPipelineRequest) Reset() {
	*x = RunPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mflow_apps_pipeline_pb_pipeline_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunPipelineRequest) ProtoMessage() {}

func (x *RunPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mflow_apps_pipeline_pb_pipeline_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunPipelineRequest.ProtoReflect.Descriptor instead.
func (*RunPipelineRequest) Descriptor() ([]byte, []int) {
	return file_mflow_apps_pipeline_pb_pipeline_proto_rawDescGZIP(), []int{6}
}

func (x *RunPipelineRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *RunPipelineRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *RunPipelineRequest) GetPipelineTaskId() string {
	if x != nil {
		return x.PipelineTaskId
	}
	return ""
}

func (x *RunPipelineRequest) GetPipelineId() string {
	if x != nil {
		return x.PipelineId
	}
	return ""
}

func (x *RunPipelineRequest) GetRunMode() job.RUN_MODE {
	if x != nil {
		return x.RunMode
	}
	return job.RUN_MODE(0)
}

func (x *RunPipelineRequest) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

func (x *RunPipelineRequest) GetTriggerMode() TRIGGER_MODE {
	if x != nil {
		return x.TriggerMode
	}
	return TRIGGER_MODE_MANUAL
}

func (x *RunPipelineRequest) GetRunBy() string {
	if x != nil {
		return x.RunBy
	}
	return ""
}

func (x *RunPipelineRequest) GetApprovalId() string {
	if x != nil {
		return x.ApprovalId
	}
	return ""
}

func (x *RunPipelineRequest) GetRunParams() []*job.RunParam {
	if x != nil {
		return x.RunParams
	}
	return nil
}

func (x *RunPipelineRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type WebHook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// POST URL
	// @gotags: bson:"url" json:"url" validate:"required,url"
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url" bson:"url" validate:"required,url"`
	// 需要自定义添加的头, 用于身份认证
	// @gotags: bson:"header" json:"header"
	Header map[string]string `protobuf:"bytes,2,rep,name=header,proto3" json:"header" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"header"`
	// 那些状态下触发, 默认所有状态变更都触发, 不区分大小写
	// @gotags: bson:"events" json:"events"
	Events []string `protobuf:"bytes,3,rep,name=events,proto3" json:"events" bson:"events"`
	// 简单的描述信息
	// @gotags: bson:"description" json:"description"
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description" bson:"description"`
}

func (x *WebHook) Reset() {
	*x = WebHook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mflow_apps_pipeline_pb_pipeline_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebHook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebHook) ProtoMessage() {}

func (x *WebHook) ProtoReflect() protoreflect.Message {
	mi := &file_mflow_apps_pipeline_pb_pipeline_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebHook.ProtoReflect.Descriptor instead.
func (*WebHook) Descriptor() ([]byte, []int) {
	return file_mflow_apps_pipeline_pb_pipeline_proto_rawDescGZIP(), []int{7}
}

func (x *WebHook) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *WebHook) GetHeader() map[string]string {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *WebHook) GetEvents() []string {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *WebHook) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

var File_mflow_apps_pipeline_pb_pipeline_proto protoreflect.FileDescriptor

var file_mflow_apps_pipeline_pb_pipeline_proto_rawDesc = []byte{
	0x0a, 0x25, 0x6d, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x70, 0x62, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x6d, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x1a, 0x1c, 0x6d, 0x63, 0x75, 0x62, 0x65, 0x2f, 0x70, 0x62, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x6d, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x6a, 0x6f, 0x62,
	0x2f, 0x70, 0x62, 0x2f, 0x6a, 0x6f, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x6d,
	0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x2f, 0x70, 0x62, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x20, 0x6d, 0x63, 0x75, 0x62, 0x65, 0x2f, 0x70, 0x62, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x76, 0x69, 0x73, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5e, 0x0a, 0x0b, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x53, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x39, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x08, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x33, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x63, 0x75,
	0x62, 0x65, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x6d, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x9e, 0x06, 0x0a,
	0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c,
	0x6f, 0x67, 0x6f, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65,
	0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x12, 0x48, 0x0a, 0x0d, 0x76, 0x69, 0x73, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x63, 0x75, 0x62, 0x65, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x56, 0x49, 0x53, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x52, 0x0c,
	0x76, 0x69, 0x73, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x04,
	0x77, 0x69, 0x74, 0x68, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x6a, 0x6f,
	0x62, 0x2e, 0x52, 0x75, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x04, 0x77, 0x69, 0x74, 0x68,
	0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x77, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x57, 0x65, 0x62, 0x48, 0x6f, 0x6f, 0x6b,
	0x52, 0x08, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x4b, 0x0a, 0x0d, 0x6d, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x4d, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0c, 0x6d, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x54, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc6, 0x01,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x50, 0x61, 0x72, 0x61,
	0x6c, 0x6c, 0x65, 0x6c, 0x12, 0x32, 0x0a, 0x04, 0x77, 0x69, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x6d, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x52, 0x75, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x52, 0x04, 0x77, 0x69, 0x74, 0x68, 0x12, 0x3c, 0x0a, 0x04, 0x6a, 0x6f, 0x62, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x6d, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x22, 0xbb, 0x07, 0x0a, 0x0d, 0x52, 0x75, 0x6e, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6b, 0x69, 0x70,
	0x5f, 0x72, 0x75, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x70,
	0x52, 0x75, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x62, 0x79, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x42, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x39, 0x0a, 0x08, 0x72, 0x75, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x6d, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x52, 0x55, 0x4e, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x72,
	0x75, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x52, 0x75, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x53,
	0x65, 0x74, 0x52, 0x09, 0x72, 0x75, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x4a, 0x0a,
	0x0f, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x6d, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x52, 0x75,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x53, 0x65, 0x74, 0x52, 0x0e, 0x72, 0x6f, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x77, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x57, 0x65, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x52,
	0x08, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x4b, 0x0a, 0x0d, 0x6d, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x4d, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0c, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x55, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xa7, 0x01, 0x0a, 0x0b, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x49, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x2e, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52,
	0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xba,
	0x04, 0x0a, 0x12, 0x52, 0x75, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x08, 0x72, 0x75, 0x6e, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x6a, 0x6f, 0x62, 0x2e,
	0x52, 0x55, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x12, 0x4a, 0x0a, 0x0c, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x27, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x54, 0x52, 0x49,
	0x47, 0x47, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x62, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x42, 0x79, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x3d,
	0x0a, 0x0a, 0x72, 0x75, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x6d, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x52, 0x75, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x52, 0x09, 0x72, 0x75, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x51, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd8, 0x01, 0x0a, 0x07,
	0x57, 0x65, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x46, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x57, 0x65, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x2e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x39, 0x0a, 0x0b, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x33, 0x0a, 0x0c, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45,
	0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x10, 0x02, 0x42, 0x2b, 0x5a, 0x29, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x2f, 0x6d, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mflow_apps_pipeline_pb_pipeline_proto_rawDescOnce sync.Once
	file_mflow_apps_pipeline_pb_pipeline_proto_rawDescData = file_mflow_apps_pipeline_pb_pipeline_proto_rawDesc
)

func file_mflow_apps_pipeline_pb_pipeline_proto_rawDescGZIP() []byte {
	file_mflow_apps_pipeline_pb_pipeline_proto_rawDescOnce.Do(func() {
		file_mflow_apps_pipeline_pb_pipeline_proto_rawDescData = protoimpl.X.CompressGZIP(file_mflow_apps_pipeline_pb_pipeline_proto_rawDescData)
	})
	return file_mflow_apps_pipeline_pb_pipeline_proto_rawDescData
}

var file_mflow_apps_pipeline_pb_pipeline_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_mflow_apps_pipeline_pb_pipeline_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_mflow_apps_pipeline_pb_pipeline_proto_goTypes = []interface{}{
	(TRIGGER_MODE)(0),             // 0: infraboard.mflow.pipeline.TRIGGER_MODE
	(*PipelineSet)(nil),           // 1: infraboard.mflow.pipeline.PipelineSet
	(*Pipeline)(nil),              // 2: infraboard.mflow.pipeline.Pipeline
	(*CreatePipelineRequest)(nil), // 3: infraboard.mflow.pipeline.CreatePipelineRequest
	(*Stage)(nil),                 // 4: infraboard.mflow.pipeline.Stage
	(*RunJobRequest)(nil),         // 5: infraboard.mflow.pipeline.RunJobRequest
	(*MentionUser)(nil),           // 6: infraboard.mflow.pipeline.MentionUser
	(*RunPipelineRequest)(nil),    // 7: infraboard.mflow.pipeline.RunPipelineRequest
	(*WebHook)(nil),               // 8: infraboard.mflow.pipeline.WebHook
	nil,                           // 9: infraboard.mflow.pipeline.CreatePipelineRequest.LabelsEntry
	nil,                           // 10: infraboard.mflow.pipeline.RunJobRequest.ExtensionEntry
	nil,                           // 11: infraboard.mflow.pipeline.RunJobRequest.LabelsEntry
	nil,                           // 12: infraboard.mflow.pipeline.RunPipelineRequest.LabelsEntry
	nil,                           // 13: infraboard.mflow.pipeline.WebHook.HeaderEntry
	(*resource.Meta)(nil),         // 14: infraboard.mcube.resource.Meta
	(resource.VISIABLE)(0),        // 15: infraboard.mcube.resource.VISIABLE
	(*job.RunParam)(nil),          // 16: infraboard.mflow.job.RunParam
	(job.RUN_MODE)(0),             // 17: infraboard.mflow.job.RUN_MODE
	(*job.RunParamSet)(nil),       // 18: infraboard.mflow.job.RunParamSet
	(notify.NOTIFY_TYPE)(0),       // 19: infraboard.mcenter.notify.NOTIFY_TYPE
}
var file_mflow_apps_pipeline_pb_pipeline_proto_depIdxs = []int32{
	2,  // 0: infraboard.mflow.pipeline.PipelineSet.items:type_name -> infraboard.mflow.pipeline.Pipeline
	14, // 1: infraboard.mflow.pipeline.Pipeline.meta:type_name -> infraboard.mcube.resource.Meta
	3,  // 2: infraboard.mflow.pipeline.Pipeline.spec:type_name -> infraboard.mflow.pipeline.CreatePipelineRequest
	15, // 3: infraboard.mflow.pipeline.CreatePipelineRequest.visiable_mode:type_name -> infraboard.mcube.resource.VISIABLE
	16, // 4: infraboard.mflow.pipeline.CreatePipelineRequest.with:type_name -> infraboard.mflow.job.RunParam
	4,  // 5: infraboard.mflow.pipeline.CreatePipelineRequest.stages:type_name -> infraboard.mflow.pipeline.Stage
	8,  // 6: infraboard.mflow.pipeline.CreatePipelineRequest.webhooks:type_name -> infraboard.mflow.pipeline.WebHook
	6,  // 7: infraboard.mflow.pipeline.CreatePipelineRequest.mention_users:type_name -> infraboard.mflow.pipeline.MentionUser
	9,  // 8: infraboard.mflow.pipeline.CreatePipelineRequest.labels:type_name -> infraboard.mflow.pipeline.CreatePipelineRequest.LabelsEntry
	16, // 9: infraboard.mflow.pipeline.Stage.with:type_name -> infraboard.mflow.job.RunParam
	5,  // 10: infraboard.mflow.pipeline.Stage.jobs:type_name -> infraboard.mflow.pipeline.RunJobRequest
	17, // 11: infraboard.mflow.pipeline.RunJobRequest.run_mode:type_name -> infraboard.mflow.job.RUN_MODE
	18, // 12: infraboard.mflow.pipeline.RunJobRequest.run_params:type_name -> infraboard.mflow.job.RunParamSet
	18, // 13: infraboard.mflow.pipeline.RunJobRequest.rollback_params:type_name -> infraboard.mflow.job.RunParamSet
	8,  // 14: infraboard.mflow.pipeline.RunJobRequest.webhooks:type_name -> infraboard.mflow.pipeline.WebHook
	6,  // 15: infraboard.mflow.pipeline.RunJobRequest.mention_users:type_name -> infraboard.mflow.pipeline.MentionUser
	10, // 16: infraboard.mflow.pipeline.RunJobRequest.extension:type_name -> infraboard.mflow.pipeline.RunJobRequest.ExtensionEntry
	11, // 17: infraboard.mflow.pipeline.RunJobRequest.labels:type_name -> infraboard.mflow.pipeline.RunJobRequest.LabelsEntry
	19, // 18: infraboard.mflow.pipeline.MentionUser.notify_types:type_name -> infraboard.mcenter.notify.NOTIFY_TYPE
	17, // 19: infraboard.mflow.pipeline.RunPipelineRequest.run_mode:type_name -> infraboard.mflow.job.RUN_MODE
	0,  // 20: infraboard.mflow.pipeline.RunPipelineRequest.trigger_mode:type_name -> infraboard.mflow.pipeline.TRIGGER_MODE
	16, // 21: infraboard.mflow.pipeline.RunPipelineRequest.run_params:type_name -> infraboard.mflow.job.RunParam
	12, // 22: infraboard.mflow.pipeline.RunPipelineRequest.labels:type_name -> infraboard.mflow.pipeline.RunPipelineRequest.LabelsEntry
	13, // 23: infraboard.mflow.pipeline.WebHook.header:type_name -> infraboard.mflow.pipeline.WebHook.HeaderEntry
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_mflow_apps_pipeline_pb_pipeline_proto_init() }
func file_mflow_apps_pipeline_pb_pipeline_proto_init() {
	if File_mflow_apps_pipeline_pb_pipeline_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mflow_apps_pipeline_pb_pipeline_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mflow_apps_pipeline_pb_pipeline_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pipeline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mflow_apps_pipeline_pb_pipeline_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mflow_apps_pipeline_pb_pipeline_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mflow_apps_pipeline_pb_pipeline_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mflow_apps_pipeline_pb_pipeline_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MentionUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mflow_apps_pipeline_pb_pipeline_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mflow_apps_pipeline_pb_pipeline_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebHook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mflow_apps_pipeline_pb_pipeline_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mflow_apps_pipeline_pb_pipeline_proto_goTypes,
		DependencyIndexes: file_mflow_apps_pipeline_pb_pipeline_proto_depIdxs,
		EnumInfos:         file_mflow_apps_pipeline_pb_pipeline_proto_enumTypes,
		MessageInfos:      file_mflow_apps_pipeline_pb_pipeline_proto_msgTypes,
	}.Build()
	File_mflow_apps_pipeline_pb_pipeline_proto = out.File
	file_mflow_apps_pipeline_pb_pipeline_proto_rawDesc = nil
	file_mflow_apps_pipeline_pb_pipeline_proto_goTypes = nil
	file_mflow_apps_pipeline_pb_pipeline_proto_depIdxs = nil
}
