syntax = "proto3";

package infraboard.mflow.task;
option go_package = "github.com/infraboard/mflow/apps/task";

import "mflow/apps/pipeline/pb/pipeline.proto";
import "mflow/apps/task/pb/pipeline_task.proto";
import "mflow/apps/task/pb/job_task.proto";
import "mcube/pb/page/page.proto";
import "mcube/pb/resource/meta.proto";
import "mcube/pb/resource/label.proto";

// RPC 执行Pipeline
service PipelineRPC {
    // 执行Pipeline
    rpc RunPipeline(pipeline.RunPipelineRequest) returns(PipelineTask);

    // 查询Pipeline任务列表
    rpc QueryPipelineTask(QueryPipelineTaskRequest) returns(PipelineTaskSet);
    // 查询Pipeline任务详情
    rpc DescribePipelineTask(DescribePipelineTaskRequest) returns(PipelineTask);
    // 删除Pipeline任务详情
    rpc DeletePipelineTask(DeletePipelineTaskRequest) returns(PipelineTask);
}

message DeletePipelineTaskRequest {
    // pipeline id
	// @gotags: json:"id"
    string id = 1;
	// 强制删除, 当job有资源无法释放时, 比如 k8s里对应的job已经被删除了
	// @gotags: json:"force"
    bool force = 2;
}

message QueryPipelineTaskRequest {
    // 资源范围
    // @gotags: json:"scope"
    mcube.resource.Scope scope = 1;
    // 资源标签过滤
    // @gotags: json:"filters"
    repeated mcube.resource.LabelRequirement filters = 2;
    // 分页请求
    // @gotags: json:"page"
    mcube.page.PageRequest page = 3;
    // 任务Id列表
    // @gotags: json:"ids"
    repeated string ids = 4;
    // 任务所属的pipeline id
    // @gotags: json:"pipeline_id"
    string pipeline_id = 5;
    // 范围查找的开始时间
    // @gotags: json:"begin_start_at"
    int64 begin_start_at = 6;
    // 范围查找的结束时间
    // @gotags: json:"end_start_at"
    int64 end_start_at = 7;
    // 触发方式
    // @gotags: json:"trigger_mode"
    optional pipeline.TRIGGER_MODE trigger_mode = 8;
	// 任务状态
	// @gotags: json:"stages"
    repeated STAGE stages = 9;
    // 任务标签
    // @gotags: json:"labels"
    map<string,string> labels = 15;
}

message DescribePipelineTaskRequest {
    // pipeline id
	// @gotags: json:"id"
    string id = 1;
}