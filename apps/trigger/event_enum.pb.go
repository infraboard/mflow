// Code generated by github.com/infraboard/mcube/v2
// DO NOT EDIT

package trigger

import (
	"bytes"
	"fmt"
	"strings"
)

// ParseSTAGEFromString Parse STAGE from string
func ParseSTAGEFromString(str string) (STAGE, error) {
	key := strings.Trim(string(str), `"`)
	v, ok := STAGE_value[strings.ToUpper(key)]
	if !ok {
		return 0, fmt.Errorf("unknown STAGE: %s", str)
	}

	return STAGE(v), nil
}

// Equal type compare
func (t STAGE) Equal(target STAGE) bool {
	return t == target
}

// IsIn todo
func (t STAGE) IsIn(targets ...STAGE) bool {
	for _, target := range targets {
		if t.Equal(target) {
			return true
		}
	}

	return false
}

// MarshalJSON todo
func (t STAGE) MarshalJSON() ([]byte, error) {
	b := bytes.NewBufferString(`"`)
	b.WriteString(strings.ToUpper(t.String()))
	b.WriteString(`"`)
	return b.Bytes(), nil
}

// UnmarshalJSON todo
func (t *STAGE) UnmarshalJSON(b []byte) error {
	ins, err := ParseSTAGEFromString(string(b))
	if err != nil {
		return err
	}
	*t = ins
	return nil
}

// ParseEVENT_PROVIDERFromString Parse EVENT_PROVIDER from string
func ParseEVENT_PROVIDERFromString(str string) (EVENT_PROVIDER, error) {
	key := strings.Trim(string(str), `"`)
	v, ok := EVENT_PROVIDER_value[strings.ToUpper(key)]
	if !ok {
		return 0, fmt.Errorf("unknown EVENT_PROVIDER: %s", str)
	}

	return EVENT_PROVIDER(v), nil
}

// Equal type compare
func (t EVENT_PROVIDER) Equal(target EVENT_PROVIDER) bool {
	return t == target
}

// IsIn todo
func (t EVENT_PROVIDER) IsIn(targets ...EVENT_PROVIDER) bool {
	for _, target := range targets {
		if t.Equal(target) {
			return true
		}
	}

	return false
}

// MarshalJSON todo
func (t EVENT_PROVIDER) MarshalJSON() ([]byte, error) {
	b := bytes.NewBufferString(`"`)
	b.WriteString(strings.ToUpper(t.String()))
	b.WriteString(`"`)
	return b.Bytes(), nil
}

// UnmarshalJSON todo
func (t *EVENT_PROVIDER) UnmarshalJSON(b []byte) error {
	ins, err := ParseEVENT_PROVIDERFromString(string(b))
	if err != nil {
		return err
	}
	*t = ins
	return nil
}
