syntax = "proto3";

package infraboard.mflow.trigger;
option go_package = "github.com/infraboard/mflow/apps/trigger";

import "mflow/apps/build/pb/build.proto";
import "mflow/apps/task/pb/pipeline_task.proto";

message RecordSet {
    // 总数
    // @gotags: bson:"total" json:"total"
    int64 total = 1;
    // 列表
    // @gotags: bson:"items" json:"items"
    repeated Record items = 2;
}

// 事件记录
message Record {
	// event相关定义
	// @gotags: bson:",inline" json:"event"
	Event event = 2;
	// 构建状态
	// @gotags: bson:"build_status" json:"build_status"
    repeated BuildStatus build_status = 3;
}

enum STAGE {
    // 等待执行
    PENDDING = 0;
    // 已经放入执行队列
    ENQUEUE = 1;
    // 取消执行
    CANCELED = 2;
    // 触发执行成功
    SUCCESS = 3;
    // 触发执行失败
    FAILED = 4;
}

message BuildStatus {
    // 构建信息, 由于可能修改, 因此需要保存整个对象
    // @gotags: bson:"build_config" json:"build_config"
    build.BuildConfig build_config = 1;
    // 触发状态
    // @gotags: bson:"stage" json:"stage"
    STAGE stage = 5;
    // 构建信息
    // @gotags: bson:"pipline_task_id" json:"pipline_task_id"
    string pipline_task_id = 2;
    // pipline具体信息, 动态查询，不保持
    // @gotags: bson:"-" json:"pipline_task"
    task.PipelineTask pipline_task = 3;
    // 如果流水线运行报错的报错信息
    // @gotags: bson:"error_message" json:"error_message"
    string error_message = 4;
}

message Event {
    // 事件id
    // @gotags: json:"id" bson:"_id"
    string id = 1;
    // 不执行Pipeline, 用于调试
    // @gotags: json:"skip_run_pipeline" bson:"skip_run_pipeline"
    bool skip_run_pipeline = 2;
    // 模拟的事件, 用于手动触发测试
    // @gotags: json:"is_mock" bson:"is_mock"
    bool is_mock = 3;
    // 事件来源, 对于gitlab而言有 发送事件的gitlab服务地址, 比如 "https://gitlab.com"
    // @gotags: bson:"from" json:"from"
    string from = 4;
    // 事件时间
    // @gotags: bson:"time" json:"time"
    int64 time = 12;
    // 发送者的user agent信息, 比如 "GitLab/15.5.0-pre"
    // @gotags: bson:"user_agent" json:"user_agent"
    string user_agent = 5;
    // 事件提供方
    // @gotags: json:"provider" bson:"provider"
    EVENT_PROVIDER provider = 6;
    // 提供方的版本, 比如gitlab 15.5.0, 不通版本有同步版本的API, 因此需要记录
    // 这个值从user agent中获取
    // @gotags: bson:"provider_version" json:"provider_version"
    string provider_version = 11;
    // 事件名称
    // @gotags: bson:"name" json:"name"
    string name = 7;
    // 事件子名称, 子名称支持正则匹配
    // @gotags: bson:"sub_name" json:"sub_name"
    string sub_name = 8;
    // 事件Token, 一般固定为 服务Id
    // @gotags: json:"token" bson:"token"
    string token = 9;
    // 服务相关信息
    // @gotags: bson:"service_info" json:"service_info"
    string service_info = 13;
    // 事件原始数据
    // @gotags: json:"raw" bson:"raw"
    string raw = 10;

    // 原始数据解析异常
    // @gotags: bson:"parse_error" json:"parse_error"
    string parse_error = 14;
    // 其他属性
    // @gotags: bson:"labels" json:"labels"
    map<string,string> extra = 15;
}

enum EVENT_PROVIDER {
    // 来自gitlab的事件
    GITLAB = 0;
}