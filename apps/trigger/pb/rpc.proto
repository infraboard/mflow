syntax = "proto3";

package infraboard.mflow.trigger;
option go_package = "github.com/infraboard/mflow/apps/trigger";

import "mflow/apps/trigger/pb/event.proto";
import "mcube/pb/page/page.proto";
import "mcube/pb/resource/meta.proto";
import "mcube/pb/resource/label.proto";

service RPC {
    // 处理事件
    rpc HandleEvent(Event) returns(Record);
    // 查询事件列表
    rpc QueryRecord(QueryRecordRequest) returns(RecordSet);
    // 查询事件详情
    rpc DescribeRecord(DescribeRecordRequest) returns(Record);
}


enum DELETE_BY {
    // id
    RECORD_ID = 0;
    // task id
    PIPELINE_TASK_ID = 1;
}

message DeleteRecordRequest {
    // @gotags: json:"delete_by"
    DELETE_BY delete_by = 1;
    // @gotags: json:"values"
    repeated string values = 2;
}

message DescribeRecordRequest {
    // @gotags: json:"id"
    string id = 1;
}

message QueryRecordRequest {
    // 分页请求
    // @gotags: json:"page"
    mcube.page.PageRequest page = 1;
    // 服务Id, 查询某个服务的事件
    // @gotags: json:"service_id"
    string service_id = 2;
    // 查询PipelineTask关联的事件
    // @gotags: json:"pipeline_task_id"
    string pipeline_task_id = 3;
    // 事件Id
    // @gotags: json:"event_ids"
    repeated string event_ids = 10;
    // 相关构建配置关联的记录
    // @gotags: json:"build_conf_ids"
    repeated string build_conf_ids = 6;
    // 构造状态过滤
    // @gotags: json:"build_stages"
    repeated STAGE build_stages = 8;
    // 资源范围
    // @gotags: json:"scope"
    mcube.resource.Scope scope = 4;
    // 是否正序排列, 默认倒序
    // @gotags: json:"is_order_ascend"
    bool is_order_ascend = 9;
    // 是否查询出管理的pipeline task对象
    // @gotags: json:"with_pipeline_task"
    bool with_pipeline_task = 7;
    // 资源标签过滤
    // @gotags: json:"filters"
    repeated mcube.resource.LabelRequirement filters = 5;
}

message EventQueueTaskCompleteRequest {
    // 事件Id
    // @gotags: json:"event_id" validate:"required"
    string event_id = 1;
    // Build Conf PipelineTask任务 执行完成
    // @gotags: json:"build_conf_id" validate:"required"
    string build_conf_id = 2;
    // 是否触发队列里面下一个任务执行
    // @gotags: json:"trigger_next"
    bool trigger_next = 3;
    // 强制更新状态, 默认状态已经完成的任务不允许重复触发
    // @gotags: json:"force_update"
    bool force_update = 4;
}